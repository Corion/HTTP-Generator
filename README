NAME

    HTTP::Generator - generate HTTP requests

SYNOPSIS

        @requests = generate_requests(
            method => 'POST',
            url    => '/profiles/:name',
            url_params => {
                name => ['Corion','Co-Rion'],
            },
            get_params => {
                stars => [2,3],
            },
            post_params => {
                comment => ['Some comment', 'Another comment, A++'],
            },
            headers => [
                {
                    "Content-Type" => 'text/plain; encoding=UTF-8',
                    Cookie => 'my_session_id',
                },
                {
                    "Content-Type" => 'text/plain; encoding=Latin-1',
                    Cookie => 'my_session_id',
                },
            ],
        );
        # Generates 16 requests out of the combinations
    
        for my $req (@requests) {
            $ua->request( $req );
        };

 generate_requests( %options )

      my $g = generate_requests(
          url => '/profiles/:name',
          url_params => ['Mark','John'],
          wrap => sub {
              my( $req ) = @_;
              # Fix up some values
              $req->{headers}->{'Content-Length'} = 666;
          },
      );
      while( my $r = $g->()) {
          send_request( $r );
      };

    This function creates data structures that are suitable for sending off
    a mass of similar but different HTTP requests. All array references are
    expanded into the cartesian product of their contents. The above
    example would create two requests:

          url => '/profiles/Mark,
          url => '/profiles/John',

    There are helper functions that will turn that data into a data
    structure suitable for your HTTP framework of choice.

      {
        method => 'GET',
        url => '/profiles/Mark',
        protocol => 'http',
        port => 80,
        headers => {},
        post_params => {},
        get_params => {},
      }

SEE ALSO

